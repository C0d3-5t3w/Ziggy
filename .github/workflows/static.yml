name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install -g sass
          npm install --save-dev terser eslint typescript
          
      - name: Create eslint config
        run: |
          echo '{
            "env": {
              "browser": true,
              "es2021": true
            },
            "extends": "eslint:recommended",
            "parserOptions": {
              "ecmaVersion": 2021,
              "sourceType": "module"
            }
          }' > .eslintrc.json
          
      - name: Create tsconfig.json
        run: |
          echo '{
            "compilerOptions": {
              "target": "es2015",
              "lib": ["dom", "es2015", "es2016", "es2017"],
              "module": "commonjs",
              "outDir": "./pkg/assets/js",
              "rootDir": "./pkg/assets/ts",
              "strict": true,
              "esModuleInterop": true,
              "skipLibCheck": true,
              "forceConsistentCasingInFileNames": true
            },
            "include": ["./pkg/assets/ts/**/*"],
            "exclude": ["node_modules"]
          }' > tsconfig.json
      
      - name: List TypeScript files
        run: |
          echo "Found TypeScript files:"
          find ./pkg/assets/ts -name "*.ts" | sort
      
      - name: Compile TypeScript
        run: |
          if command -v tsc >/dev/null 2>&1; then
            echo "Compiling TypeScript files..."
            mkdir -p pkg/assets/js
            # Use tsconfig.json for compilation instead of individual commands
            npx tsc --project tsconfig.json
            
            # Fallback to individual compilation if project compilation fails
            if [ $? -ne 0 ]; then
              echo "Trying individual file compilation..."
              tsc pkg/assets/ts/main.ts --outDir pkg/assets/js --target es2015
              tsc pkg/assets/ts/Znek.ts --outDir pkg/assets/js --target es2015
              tsc pkg/assets/ts/ZigWalk.ts --outDir pkg/assets/js --target es2015
              tsc pkg/assets/ts/FlappyZig.ts --outDir pkg/assets/js --target es2015
              tsc pkg/assets/ts/dropdown.ts --outDir pkg/assets/js --target es2015
              tsc pkg/assets/ts/animations.ts --outDir pkg/assets/js --target es2015
            fi
          else
            echo "TypeScript compiler not found - skipping TS compilation"
          fi
          
      - name: Verify JavaScript output
        run: |
          echo "Generated JavaScript files:"
          find ./pkg/assets/js -name "*.js" | sort
          # Check specifically for dropdown.js and altdropdown.js
          if [ -f "./pkg/assets/js/dropdown.js" ]; then
            echo "✅ dropdown.js successfully generated"
          else
            echo "❌ dropdown.js missing"
            exit 1
          fi
          if [ -f "./pkg/assets/js/altdropdown.js" ]; then
            echo "✅ altdropdown.js successfully generated"
          else
            echo "❌ altdropdown.js missing"
            exit 1
          fi
          
      - name: Lint JavaScript
        run: |
          npx eslint pkg/assets/js/*.js --fix || true
          
      - name: Minify JavaScript
        run: |
          for file in pkg/assets/js/*.js; do
            if [ -f "$file" ]; then
              echo "Minifying $file"
              npx terser "$file" \
                --compress \
                --mangle \
                --source-map "base='pkg/assets/js',root='pkg/assets/js',url='$(basename "$file").map'" \
                --output "${file%.js}.min.js"
              if [ -f "${file%.js}.min.js" ]; then
                mv "${file%.js}.min.js" "$file"
                echo "✅ Successfully minified $file"
              else
                echo "⚠️ Warning: Minification of $file may have failed, keeping original"
              fi
            fi
          done
          
      - name: Process PHP files
        run: |
          echo "Processing PHP files..."
          # Convert PHP files to HTML or copy them as needed
          for file in index.php 404.php pkg/pages/*.php; do
            if [ -f "$file" ]; then
              html_file="${file%.php}.html"
              php "$file" > "$html_file" 2>/dev/null || cp "$file" "$html_file"
              echo "Processed $file to $html_file"
            fi
          done
          
      - name: Compile Sass
        run: |
          if command -v sass >/dev/null 2>&1; then
            echo "Compiling Sass files..."
            mkdir -p pkg/assets/css
            sass pkg/assets/sass/main.scss:pkg/assets/css/main.css --style compressed
            sass pkg/assets/sass/ZigWalk.scss:pkg/assets/css/ZigWalk.css --style compressed
            sass pkg/assets/sass/znek-override.scss:pkg/assets/css/znek-override.css --style compressed
            sass pkg/assets/sass/fonts.scss:pkg/assets/css/fonts.css --style compressed
            sass pkg/assets/sass/additions.scss:pkg/assets/css/additions.css --style compressed
            sass pkg/assets/sass/alt.scss:pkg/assets/css/alt.css --style compressed 2>/dev/null || true
          else
            echo "Note: pkg/assets/sass/alt.scss not found - skipping compilation"
          fi
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4