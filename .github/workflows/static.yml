name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install -g sass
          npm install --save-dev terser eslint typescript
          
      - name: Create eslint config
        run: |
          echo '{
            "env": {
              "browser": true,
              "es2021": true
            },
            "extends": "eslint:recommended",
            "parserOptions": {
              "ecmaVersion": 2021,
              "sourceType": "module"
            }
          }' > .eslintrc.json
          
      - name: Create tsconfig.json
        run: |
          echo '{
            "compilerOptions": {
              "target": "ES6",
              "module": "ES2020",
              "outDir": "./pkg/assets/js",
              "rootDir": "./pkg/assets/ts",
              "strict": true,
              "esModuleInterop": true,
              "skipLibCheck": true,
              "forceConsistentCasingInFileNames": true
            },
            "include": ["./pkg/assets/ts/**/*"],
            "exclude": ["node_modules"]
          }' > tsconfig.json
      
      - name: List TypeScript files
        run: |
          echo "Found TypeScript files:"
          find ./pkg/assets/ts -name "*.ts" | sort
      
      - name: Compile TypeScript
        run: |
          mkdir -p pkg/assets/js
          echo "Compiling TypeScript files..."
          
          # First try standard tsc compilation
          npx tsc
          
          # Check if compilation succeeded
          if [ $? -ne 0 ]; then
            echo "TypeScript compilation failed with tsc. Trying alternative method."
            
            # Fallback method: compile each TS file individually
            find ./pkg/assets/ts -name "*.ts" | while read -r file; do
              echo "Individually compiling $file"
              outfile="./pkg/assets/js/$(basename "${file%.ts}.js")"
              outdir=$(dirname "$outfile")
              mkdir -p "$outdir"
              npx tsc "$file" --outDir "$outdir" --target ES6 --module ES2020
            done
          fi
          
      - name: Verify JavaScript output
        run: |
          echo "Generated JavaScript files:"
          find ./pkg/assets/js -name "*.js" | sort
          
          # Check for any missing outputs
          ts_files=$(find ./pkg/assets/ts -name "*.ts" | wc -l)
          js_files=$(find ./pkg/assets/js -name "*.js" | wc -l)
          echo "TypeScript files count: $ts_files"
          echo "JavaScript files count: $js_files"
          
          # Special handling for critical files
          for critical_file in "Znek" "FlappyZig" "main" "ZigWalk" "dropdown" "animations"; do
            if [ -f "./pkg/assets/ts/${critical_file}.ts" ] && [ ! -f "./pkg/assets/js/${critical_file}.js" ]; then
              echo "⚠️ Critical file missing: ${critical_file}.js - attempting direct compilation"
              npx tsc ./pkg/assets/ts/${critical_file}.ts --outFile ./pkg/assets/js/${critical_file}.js --target ES6 --module None
            fi
          done
          
      - name: Lint JavaScript
        run: |
          npx eslint pkg/assets/js/*.js --fix || true
          
      - name: Minify JavaScript
        run: |
          find ./pkg/assets/js -name "*.js" | while read -r file; do
            if [ -f "$file" ]; then
              echo "Minifying $file"
              npx terser "$file" \
                --compress \
                --mangle \
                --output "${file%.js}.min.js"
              if [ -f "${file%.js}.min.js" ]; then
                mv "${file%.js}.min.js" "$file"
                echo "✅ Successfully minified $file"
              else
                echo "⚠️ Warning: Minification of $file may have failed, keeping original"
              fi
            fi
          done
          
      - name: Process PHP files
        run: |
          echo "Listing all PHP files found in repository:"
          find . -type f -name "*.php" | sort
          
          echo "Processing PHP files..."
          find . -type f -name "*.php" -exec sh -c '
            outfile="${1%.php}.html"
            outdir=$(dirname "$outfile")
            mkdir -p "$outdir"
            echo "Converting $1 to $outfile"
            php "$1" > "$outfile"
          ' sh {} \;
          
          echo "Verifying conversion - HTML files created:"
          find . -type f -name "*.html" | grep -v "node_modules" | sort
          
          # Don't remove PHP files yet - keep them for reference
          # find . -type f -name "*.php" -delete
          
      - name: Compile Sass
        run: |
          mkdir -p pkg/assets/css
          echo "Compiling all SCSS files..."
          
          # Find all SCSS files and compile them
          find ./pkg/assets/sass -name "*.scss" | while read -r scss_file; do
            # Get relative path of the SCSS file within the sass directory
            rel_path=$(echo "$scss_file" | sed 's|./pkg/assets/sass/||')
            # Create the output path in the css directory
            css_file="./pkg/assets/css/${rel_path%.scss}.css"
            # Create directory for output file if it doesn't exist
            mkdir -p "$(dirname "$css_file")"
            
            echo "Compiling $scss_file to $css_file"
            sass "$scss_file":"$css_file" --style=compressed
            
            if [ -f "$css_file" ]; then
              echo "✅ Successfully compiled $scss_file to $css_file"
            else
              echo "❌ Failed to compile $scss_file"
            fi
          done
          
          # Verify CSS outputs
          echo "Generated CSS files:"
          find ./pkg/assets/css -name "*.css" | sort
          
      - name: Create 404 page
        run: |
          if [ ! -f "404.html" ]; then
            echo '<!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <title>404 - Page Not Found | Ziggy</title>
                <link rel="stylesheet" href="pkg/assets/css/main.css">
                <style>
                    body { display: flex; align-items: center; justify-content: center; height: 100vh; text-align: center; }
                    .container { max-width: 600px; padding: 20px; }
                    h1 { color: var(--primary-color); }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>404 - Page Not Found</h1>
                    <p>Sorry, but the page you were looking for could not be found.</p>
                    <a href="index.html" class="btn">Return Home</a>
                </div>
            </body>
            </html>' > 404.html
            echo "✅ Created 404.html page"
          fi

      - name: Ensure index.html exists
        run: |
          if [ ! -f "index.html" ]; then
            if [ -f "index.php.html" ]; then
              cp index.php.html index.html
              echo "✅ Copied index.php.html to index.html"
            else
              echo '<!DOCTYPE html>
              <html>
              <head>
                  <meta charset="utf-8">
                  <title>Welcome to Ziggy</title>
                  <meta http-equiv="refresh" content="0;url=index.php.html">
              </head>
              <body>
                  <p>Redirecting to <a href="index.php.html">homepage</a>...</p>
              </body>
              </html>' > index.html
              echo "✅ Created redirect index.html"
            fi
          fi

      - name: Fix paths in HTML files
        run: |
          # Optional: Fix any paths in HTML files that might be broken after PHP conversion
          find . -name "*.html" -type f -exec sed -i 's/href="\([^"]*\)\.php"/href="\1.php.html"/g' {} \;
          find . -name "*.html" -type f -exec sed -i 's/action="\([^"]*\)\.php"/action="\1.php.html"/g' {} \;
          
      - name: Verify file structure
        run: |
          echo "Final file structure:"
          find . -type f -not -path "./node_modules/*" -not -path "./.git/*" | sort
          
          echo "\nVerifying key files exist:"
          for file in "index.html" "404.html" "pkg/assets/js/main.js" "pkg/assets/css/main.css"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
            fi
          done
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4