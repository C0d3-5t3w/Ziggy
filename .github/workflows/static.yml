name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install -g sass
          npm install --save-dev terser eslint typescript
          
      - name: Create eslint config
        run: |
          echo '{
            "env": {
              "browser": true,
              "es2021": true
            },
            "extends": "eslint:recommended",
            "parserOptions": {
              "ecmaVersion": 2021,
              "sourceType": "module"
            }
          }' > .eslintrc.json
          
      - name: Create tsconfig.json
        run: |
          echo '{
            "compilerOptions": {
              "target": "ES6",
              "module": "ES2020",
              "outDir": "./pkg/assets/js",
              "rootDir": "./pkg/assets/ts",
              "strict": true,
              "esModuleInterop": true,
              "skipLibCheck": true,
              "forceConsistentCasingInFileNames": true
            },
            "include": ["./pkg/assets/ts/**/*"],
            "exclude": ["node_modules"]
          }' > tsconfig.json
      
      - name: List TypeScript files
        run: |
          echo "Found TypeScript files:"
          find ./pkg/assets/ts -name "*.ts" | sort
      
      - name: Compile TypeScript
        run: |
          mkdir -p pkg/assets/js
          echo "Compiling TypeScript files..."
          
          echo "Running TSC with full configuration..."
          npx tsc
          
          if [ $? -ne 0 ]; then
            echo "TypeScript compilation failed with tsc. Trying alternative method."
            
            find ./pkg/assets/ts -name "*.ts" | while read -r file; do
              echo "Individually compiling $file"
              outfile="./pkg/assets/js/$(basename "${file%.ts}.js")"
              outdir=$(dirname "$outfile")
              mkdir -p "$outdir"
              
              if [ -f "$outfile" ]; then
                echo "Removing existing file: $outfile"
                rm "$outfile"
              fi
              
              echo "Compiling $file to $outfile..."
              npx tsc "$file" --outDir "$outdir" --target ES6 --module ES2020
            done
          fi
          
      - name: Verify JavaScript output
        run: |
          echo "Generated JavaScript files:"
          find ./pkg/assets/js -name "*.js" | sort
          
          ts_files=$(find ./pkg/assets/ts -name "*.ts" | wc -l)
          js_files=$(find ./pkg/assets/js -name "*.js" | wc -l)
          echo "TypeScript files count: $ts_files"
          echo "JavaScript files count: $js_files"
          
          for critical_file in "Znek" "FlappyZig" "main" "ZigWalk" "dropdown" "animations"; do
            if [ -f "./pkg/assets/ts/${critical_file}.ts" ] && [ ! -f "./pkg/assets/js/${critical_file}.js" ]; then
              echo "⚠️ Critical file missing: ${critical_file}.js - attempting direct compilation"
              npx tsc ./pkg/assets/ts/${critical_file}.ts --outFile ./pkg/assets/js/${critical_file}.js --target ES6 --module None
            elif [ -f "./pkg/assets/js/${critical_file}.js" ]; then
              echo "✅ Critical file exists: ./pkg/assets/js/${critical_file}.js"
              ls -la "./pkg/assets/js/${critical_file}.js"
              echo "File content preview (first 5 lines):"
              head -n 5 "./pkg/assets/js/${critical_file}.js"
            else
              echo "⚠️ Critical TS file not found: ./pkg/assets/ts/${critical_file}.ts"
            fi
          done
          
      - name: Minify JavaScript with timestamp versioning
        run: |
          BUILD_TIMESTAMP=$(date +%s)
          echo "Using build timestamp: $BUILD_TIMESTAMP for versioning"
          
          find ./pkg/assets/js -name "*.js" | while read -r file; do
            if [ -f "$file" ]; then
              echo "Minifying $file"
              
              cp "$file" "${file}.backup"
              
              echo "/* Build: ${BUILD_TIMESTAMP} - $(date) */" > "${file}.versioned"
              cat "${file}.backup" >> "${file}.versioned"
              
              npx terser "${file}.versioned" \
                --compress \
                --mangle \
                --output "${file}.min.js"
                
              if [ -f "${file}.min.js" ]; then
                echo "/* Build: ${BUILD_TIMESTAMP} - $(date) */" > "${file}.temp"
                cat "${file}.min.js" >> "${file}.temp"
                mv "${file}.temp" "$file"
                
                echo "✅ Successfully minified and versioned $file"
                head -n 3 "$file"
                
                rm -f "${file}.versioned" "${file}.backup" "${file}.min.js"
              else
                echo "⚠️ Warning: Minification of $file failed, keeping original"
                mv "${file}.backup" "$file"
                rm -f "${file}.versioned"
              fi
            fi
          done
      
      - name: Verify ZigWalk.js specifically
        run: |
          ZIGWALK_FILE="./pkg/assets/js/ZigWalk.js"
          if [ -f "$ZIGWALK_FILE" ]; then
            echo "ZigWalk.js exists and has size:"
            ls -la "$ZIGWALK_FILE"
            
            if [ -f "./pkg/pages/ZigWalk.php.html" ]; then
              echo "Adding no-cache meta tags to ZigWalk.php.html"
              sed -i 's/<head>/<head>\n    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" \/>\n    <meta http-equiv="Pragma" content="no-cache" \/>\n    <meta http-equiv="Expires" content="0" \/>/' "./pkg/pages/ZigWalk.php.html"
            fi
            
            find . -name "*.html" -type f -exec sed -i "s/ZigWalk.js/ZigWalk.js?v=$(date +%s)/g" {} \;
          else
            echo "❌ CRITICAL ERROR: ZigWalk.js does not exist!"
            exit 1
          fi
          
      - name: Process PHP files
        run: |
          echo "Listing all PHP files found in repository:"
          find . -type f -name "*.php" | sort
          
          echo "Processing PHP files..."
          find . -type f -name "*.php" -exec sh -c '
            outfile="${1%.php}.html"
            outdir=$(dirname "$outfile")
            mkdir -p "$outdir"
            echo "Converting $1 to $outfile"
            php "$1" > "$outfile"
          ' sh {} \;
          
          echo "Verifying conversion - HTML files created:"
          find . -type f -name "*.html" | grep -v "node_modules" | sort
          
      - name: Fix paths in HTML files with cache busting
        run: |
          CACHE_BUSTER=$(date +%s)
          
          find . -name "*.html" -type f -exec sed -i "s/href=\"\\([^\"]*\\)\\.php\"/href=\"\\1.php.html\"/g" {} \;
          find . -name "*.html" -type f -exec sed -i "s/action=\"\\([^\"]*\\)\\.php\"/action=\"\\1.php.html\"/g" {} \;
          find . -name "*.html" -type f -exec sed -i "s/src=\"\\([^\"]*\\)\\.js\"/src=\"\\1.js?v=$CACHE_BUSTER\"/g" {} \;
          find . -name "*.html" -type f -exec sed -i "s/href=\"\\([^\"]*\\)\\.css\"/href=\"\\1.css?v=$CACHE_BUSTER\"/g" {} \;
          
          echo "Added cache busting with timestamp: $CACHE_BUSTER"
          
      - name: Verify file structure
        run: |
          echo "Final file structure:"
          find . -type f -not -path "./node_modules/*" -not -path "./.git/*" | sort
          
          echo "\nVerifying key files exist:"
          for file in "index.html" "404.html" "pkg/assets/js/main.js" "pkg/assets/css/main.css" "pkg/assets/js/ZigWalk.js"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists with size $(stat -c %s "$file") bytes"
              if [[ $file == *.js ]]; then
                LINES=$(wc -l < "$file")
                echo "   - File has $LINES lines of code"
                if [ $LINES -lt 5 ]; then
                  echo "   ⚠️ WARNING: File seems too small, might be empty or corrupt"
                fi
              fi
            else
              echo "❌ $file missing - CRITICAL ERROR"
              exit 1
            fi
          done
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4